{
  "package": "pandas",
  "version": "2.3.2",
  "qualified_name": "pandas.core.reshape.concat.concat",
  "file": "/var/folders/8y/1_rm_t850ndf6rxl9ggy1qdh0000gn/T/spec_pandas_g1r3xsmt/pandas-2.3.2/pandas/core/reshape/concat.py",
  "signature": "(objs: Iterable[Series | DataFrame] | Mapping[HashableT, Series | DataFrame], axis: Axis = 0, join: str = 'outer', ignore_index: bool = False, keys: Iterable[Hashable] | None = None, levels = None, names: list[HashableT] | None = None, verify_integrity: bool = False, sort: bool = False, copy: bool | None = None) -> DataFrame | Series",
  "parameters": [
    {
      "name": "objs",
      "kind": "POSITIONAL_OR_KEYWORD",
      "type": "Iterable[Series | DataFrame] | Mapping[HashableT, Series | DataFrame]",
      "default": null,
      "required": true,
      "nullable": false,
      "enum": null,
      "description": "If a mapping is passed, the sorted keys will be used as the `keys` argument, unless it is passed, in which case the values will be selected (see below). Any None objects will be dropped silently unless they are all None in which case a ValueError will be raised."
    },
    {
      "name": "axis",
      "kind": "KEYWORD_ONLY",
      "type": "Axis",
      "default": "0",
      "required": false,
      "nullable": false,
      "enum": [
        0,
        "index",
        1,
        "columns"
      ],
      "description": "The axis to concatenate along."
    },
    {
      "name": "join",
      "kind": "KEYWORD_ONLY",
      "type": "str",
      "default": "'outer'",
      "required": false,
      "nullable": false,
      "enum": [
        "inner",
        "outer"
      ],
      "description": "How to handle indexes on other axis (or axes)."
    },
    {
      "name": "ignore_index",
      "kind": "KEYWORD_ONLY",
      "type": "bool",
      "default": "False",
      "required": false,
      "nullable": false,
      "enum": null,
      "description": "If True, do not use the index values along the concatenation axis. The resulting axis will be labeled 0, ..., n - 1. This is useful if you are concatenating objects where the concatenation axis does not have meaningful indexing information. Note the index values on the other axes are still respected in the join."
    },
    {
      "name": "keys",
      "kind": "KEYWORD_ONLY",
      "type": "Iterable[Hashable] | None",
      "default": "None",
      "required": false,
      "nullable": false,
      "enum": null,
      "description": "If multiple levels passed, should contain tuples. Construct hierarchical index using the passed keys as the outermost level."
    },
    {
      "name": "levels",
      "kind": "KEYWORD_ONLY",
      "type": "list of sequences",
      "default": "None",
      "required": false,
      "nullable": false,
      "enum": null,
      "description": "Specific levels (unique values) to use for constructing a MultiIndex. Otherwise they will be inferred from the keys."
    },
    {
      "name": "names",
      "kind": "KEYWORD_ONLY",
      "type": "list[HashableT] | None",
      "default": "None",
      "required": false,
      "nullable": false,
      "enum": null,
      "description": "Names for the levels in the resulting hierarchical index."
    },
    {
      "name": "verify_integrity",
      "kind": "KEYWORD_ONLY",
      "type": "bool",
      "default": "False",
      "required": false,
      "nullable": false,
      "enum": null,
      "description": "Check whether the new concatenated axis contains duplicates. This can be very expensive relative to the actual data concatenation."
    },
    {
      "name": "sort",
      "kind": "KEYWORD_ONLY",
      "type": "bool",
      "default": "False",
      "required": false,
      "nullable": false,
      "enum": null,
      "description": "Sort non-concatenation axis if it is not already aligned. One exception to this is when the non-concatentation axis is a DatetimeIndex and join='outer' and the axis is not already aligned. In that case, the non-concatenation axis is always sorted lexicographically."
    },
    {
      "name": "copy",
      "kind": "KEYWORD_ONLY",
      "type": "bool | None",
      "default": "None",
      "required": false,
      "nullable": false,
      "enum": null,
      "description": "If False, do not copy data unnecessarily."
    }
  ],
  "returns": {
    "type": "DataFrame | Series",
    "description": "object, type of objs\n    When concatenating all ``Series`` along the index (axis=0), a\n    ``Series`` is returned. When ``objs`` contains at least one\n    ``DataFrame``, a ``DataFrame`` is returned. When concatenating along\n    the columns (axis=1), a ``DataFrame`` is returned.\n\nSee Also\n--------\nDataFrame.join : Join DataFrames using indexes.\nDataFrame.merge : Merge DataFrames by indexes or columns."
  },
  "raises": [
    "ValueError"
  ],
  "notes": [
    "The keys, levels, and names arguments are all optional.",
    "A walkthrough of how this method fits in with other tools for combining",
    "pandas objects can be found `here",
    "<https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html>`__.",
    "It is not recommended to build DataFrames by adding single rows in a",
    "for loop. Build a list of rows and make a DataFrame in a single concat."
  ],
  "examples_code": [
    "s1 = pd.Series(['a', 'b'])\ns2 = pd.Series(['c', 'd'])\npd.concat([s1, s2])",
    "pd.concat([s1, s2], ignore_index=True)",
    "pd.concat([s1, s2], keys=['s1', 's2'])",
    "pd.concat([s1, s2], keys=['s1', 's2'],\n          names=['Series name', 'Row ID'])",
    "df1 = pd.DataFrame([['a', 1], ['b', 2]],\n                   columns=['letter', 'number'])\ndf1",
    "df2 = pd.DataFrame([['c', 3], ['d', 4]],\n                   columns=['letter', 'number'])\ndf2",
    "pd.concat([df1, df2])",
    "df3 = pd.DataFrame([['c', 3, 'cat'], ['d', 4, 'dog']],\n                   columns=['letter', 'number', 'animal'])\ndf3",
    "pd.concat([df1, df3], sort=False)",
    "pd.concat([df1, df3], join=\"inner\")",
    "df4 = pd.DataFrame([['bird', 'polly'], ['monkey', 'george']],\n                   columns=['animal', 'name'])\npd.concat([df1, df4], axis=1)",
    "df5 = pd.DataFrame([1], index=['a'])\ndf5",
    "df6 = pd.DataFrame([2], index=['a'])\ndf6",
    "pd.concat([df5, df6], verify_integrity=True)",
    "df7 = pd.DataFrame({'a': 1, 'b': 2}, index=[0])\ndf7",
    "new_row = pd.Series({'a': 3, 'b': 4})\nnew_row",
    "pd.concat([df7, new_row.to_frame().T], ignore_index=True)"
  ],
  "body_stripped": "def concat(\n    objs: Iterable[Series | DataFrame] | Mapping[HashableT, Series | DataFrame],\n    *,\n    axis: Axis = 0,\n    join: str = \"outer\",\n    ignore_index: bool = False,\n    keys: Iterable[Hashable] | None = None,\n    levels=None,\n    names: list[HashableT] | None = None,\n    verify_integrity: bool = False,\n    sort: bool = False,\n    copy: bool | None = None,\n) -> DataFrame | Series:\n    \"\"\"\n    Concatenate pandas objects along a particular axis.\n\n    Allows optional set logic along the other axes.\n\n    Can also add a layer of hierarchical indexing on the concatenation axis,\n    which may be useful if the labels are the same (or overlapping) on\n    the passed axis number.\n\n    Parameters\n    ----------\n    objs : a sequence or mapping of Series or DataFrame objects\n        If a mapping is passed, the sorted keys will be used as the `keys`\n        argument, unless it is passed, in which case the values will be\n        selected (see below). Any None objects will be dropped silently unless\n        they are all None in which case a ValueError will be raised.\n    axis : {0/'index', 1/'columns'}, default 0\n        The axis to concatenate along.\n    join : {'inner', 'outer'}, default 'outer'\n        How to handle indexes on other axis (or axes).\n    ignore_index : bool, default False\n        If True, do not use the index values along the concatenation axis. The\n        resulting axis will be labeled 0, ..., n - 1. This is useful if you are\n        concatenating objects where the concatenation axis does not have\n        meaningful indexing information. Note the index values on the other\n        axes are still respected in the join.\n    keys : sequence, default None\n        If multiple levels passed, should contain tuples. Construct\n        hierarchical index using the passed keys as the outermost level.\n    levels : list of sequences, default None\n        Specific levels (unique values) to use for constructing a\n        MultiIndex. Otherwise they will be inferred from the keys.\n    names : list, default None\n        Names for the levels in the resulting hierarchical index.\n    verify_integrity : bool, default False\n        Check whether the new concatenated axis contains duplicates. This can\n        be very expensive relative to the actual data concatenation.\n    sort : bool, default False\n        Sort non-concatenation axis if it is not already aligned. One exception to\n        this is when the non-concatentation axis is a DatetimeIndex and join='outer'\n        and the axis is not already aligned. In that case, the non-concatenation\n        axis is always sorted lexicographically.\n    copy : bool, default True\n        If False, do not copy data unnecessarily.\n\n    Returns\n    -------\n    object, type of objs\n        When concatenating all ``Series`` along the index (axis=0), a\n        ``Series`` is returned. When ``objs`` contains at least one\n        ``DataFrame``, a ``DataFrame`` is returned. When concatenating along\n        the columns (axis=1), a ``DataFrame`` is returned.\n\n    See Also\n    --------\n    DataFrame.join : Join DataFrames using indexes.\n    DataFrame.merge : Merge DataFrames by indexes or columns.\n\n    Notes\n    -----\n    The keys, levels, and names arguments are all optional.\n\n    A walkthrough of how this method fits in with other tools for combining\n    pandas objects can be found `here\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html>`__.\n\n    It is not recommended to build DataFrames by adding single rows in a\n    for loop. Build a list of rows and make a DataFrame in a single concat.\n\n    Examples\n    --------\n    Combine two ``Series``.\n\n    >>> s1 = pd.Series(['a', 'b'])\n    >>> s2 = pd.Series(['c', 'd'])\n    >>> pd.concat([s1, s2])\n    0    a\n    1    b\n    0    c\n    1    d\n    dtype: object\n\n    Clear the existing index and reset it in the result\n    by setting the ``ignore_index`` option to ``True``.\n\n    >>> pd.concat([s1, s2], ignore_index=True)\n    0    a\n    1    b\n    2    c\n    3    d\n    dtype: object\n\n    Add a hierarchical index at the outermost level of\n    the data with the ``keys`` option.\n\n    >>> pd.concat([s1, s2], keys=['s1', 's2'])\n    s1  0    a\n        1    b\n    s2  0    c\n        1    d\n    dtype: object\n\n    Label the index keys you create with the ``names`` option.\n\n    >>> pd.concat([s1, s2], keys=['s1', 's2'],\n    ...           names=['Series name', 'Row ID'])\n    Series name  Row ID\n    s1           0         a\n                 1         b\n    s2           0         c\n                 1         d\n    dtype: object\n\n    Combine two ``DataFrame`` objects with identical columns.\n\n    >>> df1 = pd.DataFrame([['a', 1], ['b', 2]],\n    ...                    columns=['letter', 'number'])\n    >>> df1\n      letter  number\n    0      a       1\n    1      b       2\n    >>> df2 = pd.DataFrame([['c', 3], ['d', 4]],\n    ...                    columns=['letter', 'number'])\n    >>> df2\n      letter  number\n    0      c       3\n    1      d       4\n    >>> pd.concat([df1, df2])\n      letter  number\n    0      a       1\n    1      b       2\n    0      c       3\n    1      d       4\n\n    Combine ``DataFrame`` objects with overlapping columns\n    and return everything. Columns outside the intersection will\n    be filled with ``NaN`` values.\n\n    >>> df3 = pd.DataFrame([['c', 3, 'cat'], ['d', 4, 'dog']],\n    ...                    columns=['letter', 'number', 'animal'])\n    >>> df3\n      letter  number animal\n    0      c       3    cat\n    1      d       4    dog\n    >>> pd.concat([df1, df3], sort=False)\n      letter  number animal\n    0      a       1    NaN\n    1      b       2    NaN\n    0      c       3    cat\n    1      d       4    dog\n\n    Combine ``DataFrame`` objects with overlapping columns\n    and return only those that are shared by passing ``inner`` to\n    the ``join`` keyword argument.\n\n    >>> pd.concat([df1, df3], join=\"inner\")\n      letter  number\n    0      a       1\n    1      b       2\n    0      c       3\n    1      d       4\n\n    Combine ``DataFrame`` objects horizontally along the x axis by\n    passing in ``axis=1``.\n\n    >>> df4 = pd.DataFrame([['bird', 'polly'], ['monkey', 'george']],\n    ...                    columns=['animal', 'name'])\n    >>> pd.concat([df1, df4], axis=1)\n      letter  number  animal    name\n    0      a       1    bird   polly\n    1      b       2  monkey  george\n\n    Prevent the result from including duplicate index values with the\n    ``verify_integrity`` option.\n\n    >>> df5 = pd.DataFrame([1], index=['a'])\n    >>> df5\n       0\n    a  1\n    >>> df6 = pd.DataFrame([2], index=['a'])\n    >>> df6\n       0\n    a  2\n    >>> pd.concat([df5, df6], verify_integrity=True)\n    Traceback (most recent call last):\n        ...\n    ValueError: Indexes have overlapping values: ['a']\n\n    Append a single row to the end of a ``DataFrame`` object.\n\n    >>> df7 = pd.DataFrame({'a': 1, 'b': 2}, index=[0])\n    >>> df7\n        a   b\n    0   1   2\n    >>> new_row = pd.Series({'a': 3, 'b': 4})\n    >>> new_row\n    a    3\n    b    4\n    dtype: int64\n    >>> pd.concat([df7, new_row.to_frame().T], ignore_index=True)\n        a   b\n    0   1   2\n    1   3   4\n    \"\"\"\n    if copy is None:\n        if using_copy_on_write():\n            copy = False\n        else:\n            copy = True\n    elif copy and using_copy_on_write():\n        copy = False\n\n    op = _Concatenator(\n        objs,\n        axis=axis,\n        ignore_index=ignore_index,\n        join=join,\n        keys=keys,\n        levels=levels,\n        names=names,\n        verify_integrity=verify_integrity,\n        copy=copy,\n        sort=sort,\n    )\n\n    return op.get_result()\n"
}